#include "piece.h"
#define SQUARE_SIZE 100
PuzzlePiece::PuzzlePiece(int x, int y, int value, int dir){
    m_pos_x = x;
    m_pos_y = y;
    m_value = value;
    m_movable_dir = dir;
}

PuzzleBoard::PuzzleBoard(int board_size)
{
    m_board_size = board_size;
    PuzzlePiece *new_piece = NULL;
    int value = 0;
    for(int i = 0; i < m_board_size; i++){
        for(int j = 0; j < m_board_size; j++){
            value = (i + j*m_board_size)+1;

            new_piece = new PuzzlePiece(i,j, value, BLOCKED);

            m_board.push_back(*new_piece);

            delete new_piece;
            new_piece = NULL;
        }
    }
    m_board[(m_board_size*m_board_size)-1].m_value = 0;
    update_board();
}

PuzzleBoard::~PuzzleBoard(){
    m_unique_id.clear();
    m_board.clear();
}

PuzzlePiece* PuzzleBoard::piece(int x, int y){
    if((x >= 0) && (x < m_board_size) && (y>=0) && (y < m_board_size))
    {
        return &m_board[x*m_board_size + y];
    }
    else
    {
        return  NULL;
    }
}

void PuzzleBoard::scramble_board_with_moves(int num_moves){

    srand(time(NULL));
    std::vector<PuzzlePiece*> movable_pieces;
    PuzzlePiece *curr_piece;
    int piece_num = 0;
    for(int i = 0; i < num_moves; i++){
        movable_pieces = this->get_movable_pieces();
        piece_num = rand() % movable_pieces.size();
        curr_piece = movable_pieces[piece_num];
        this->move_piece(curr_piece->m_pos_x,curr_piece->m_pos_y);
        movable_pieces.clear();
    }
    return;
}

void PuzzleBoard::update_board(){
    for(int i = 0; i < m_board_size; i++){
        for(int j = 0; j < m_board_size; j++){
            if(piece(i,j)->m_value == 0){
                piece(i,j)->m_movable_dir = BLOCKED;
            }else{
                piece(i,j)->m_movable_dir = check_piece_mov(i,j);
            }
        }
    }
    calculate_unique_id();
    return;
}

void PuzzleBoard::move_piece(int x, int y){
    PuzzlePiece *temp_piece = NULL;
    PuzzlePiece *curr_piece = NULL;
    int backup_value = 0;
    int direction = check_piece_mov(x,y);
    curr_piece = piece(x,y);
    if((direction != BLOCKED) && (curr_piece->m_value != 0)){
        switch(direction){
        case LEFT:
            temp_piece = piece(x-1,y);
            break;
        case RIGHT:
            temp_piece = piece(x+1,y);
            break;
        case UP:
            temp_piece = piece(x,y-1);
            break;
        case DOWN:
            temp_piece = piece(x,y+1);
            break;
        default:
            break;
        }
        backup_value = curr_piece->m_value;
        curr_piece->m_value = temp_piece->m_value;
        temp_piece->m_value = backup_value;
        update_board();
    }
}

int PuzzleBoard::check_piece_mov(int x, int y){
    if(x >= m_board_size || y >= m_board_size){
        return BLOCKED;
    }
    if(x-1 >=0){
        if(piece(x-1,y)->m_value == 0){
            return LEFT;
        }
    }
    if(x+1 < m_board_size){
        if(piece(x+1,y)->m_value == 0){
            return RIGHT;
        }
    }
    if(y+1 < m_board_size){
        if(piece(x,y+1)->m_value == 0){
            return DOWN;
        }
    }
    if(y-1 >=0){
        if(piece(x,y-1)->m_value == 0){
            return UP;
        }
    }
    return BLOCKED;
}


int PuzzleBoard::get_size(){
    return this->m_board_size;
}

std::vector<PuzzlePiece*> PuzzleBoard::get_movable_pieces(){
    update_board();
    std::vector<PuzzlePiece*> mov_pieces;
    for(int i = 0; i < m_board_size; i++){
        for(int j = 0; j < m_board_size; j++){
            if(check_piece_mov(i,j) != BLOCKED){
                mov_pieces.push_back(this->piece(i,j));
            }
        }
    }
    return mov_pieces;
}

const Board* PuzzleBoard::get_board(){
    return &this->m_board;
}

void PuzzleBoard::set_board(PuzzleBoard *b){
    std::vector<PuzzlePiece>::const_iterator iter;
    int index = 0;
    for(iter = b->get_board()->begin(); iter != b->get_board()->end(); iter++){
        this->m_board[index].m_pos_x = (*iter).m_pos_x;
        this->m_board[index].m_pos_y = (*iter).m_pos_y;
        this->m_board[index].m_value = (*iter).m_value;
        this->m_board[index].m_movable_dir = (*iter).m_movable_dir;
        index++;
    }
    this->calculate_unique_id();
}

bool PuzzleBoard::compare_boards(PuzzleBoard *b){
    Board_Iter iter;
    Board_Iter comp_iter;
    comp_iter = b->m_board.begin();
    PuzzlePiece *a = NULL;
    PuzzlePiece *comp = NULL;
    for(iter = m_board.begin(); iter != m_board.end(); iter++){
        a = &(*iter);
        comp = &(*comp_iter);
        if((a->m_movable_dir != comp->m_movable_dir) || (a->m_pos_x != comp->m_pos_x)
                || (a->m_pos_y != comp->m_pos_y) || (a->m_value != comp->m_value)){
            return false;
        }
        comp_iter++;
    }
    return true;
}

void PuzzleBoard::calculate_unique_id(){
    Board_Iter iter;
    m_unique_id = "";
    char ascii;
    for(iter = m_board.begin(); iter != m_board.end(); iter++){
        ascii = (*iter).m_value + 'A';
        m_unique_id.append(ascii);
    }
}

QString* PuzzleBoard::get_unique_id(){
    return &m_unique_id;
}


BoardWidget::BoardWidget(PuzzleBoard *board,bool locked,int img, QWidget *parent) :
    QWidget(parent)
{
    m_board = board;
    m_painter = new QPainter();
    m_img_index = img;
    load_images();
    m_locked = locked;
}

BoardWidget::~BoardWidget(){
    delete m_painter;
    m_pieces_image.clear();
}


void BoardWidget::load_images(){
    int size = m_board->get_size();
    QImage image;
    QString img_path;
    QString type;


    switch(m_img_index){
        case 0:
            img_path = ":/Images/awesome";
            type = ".jpg";
            break;
        case 1:
            img_path = ":/Images/troll_face";
            type = ".png";
            break;
        case 2:
            img_path = ":/Images/rage";
            type = ".jpg";
            break;
        case 3:
            img_path = ":/Images/classic";
            type = ".png";
            break;
        case 4:
            img_path = ":/Images/gray";
            type = ".png";
            break;
        case 5:
            img_path = ":/Images/red";
            type = ".jpg";
            break;
        case 6:
            img_path = ":/Images/orange";
            type = ".png";
            break;
    case 7:
        img_path = ":/Images/rupp";
        type = ".png";
        break;
    case 8:
        img_path = ":/Images/ited";
        type = ".png";
        break;
    case 9:
        img_path = ":/Images/tb";
        type = ".png";
        break;
    case 10:
        img_path = ":/Images/me";
        type = ".png";
        break;
    }

    switch(size){
    case 3:
        img_path.append("3x3");
        break;
    case 4:
        img_path.append("4x4");
        break;
    case 5:
        img_path.append("5x5");
        break;
    }
    img_path.append(type);
    image.load(img_path);
    m_pieces_image.clear();                     //board size
    m_pieces_image.resize(size*size);
    for(int i = 0; i < size; i++){
         for(int j = 0; j < size; j++){
          m_pieces_image[i + (size*j)] = image.copy(QRect(i*SQUARE_SIZE,j*SQUARE_SIZE,SQUARE_SIZE,SQUARE_SIZE));
         }
    }
    update();
}


void BoardWidget::lock_board(bool lock){
    m_locked = lock;
}


void BoardWidget::change_image(int img){
    m_img_index = img;
    m_pieces_image.clear();
    load_images();
}


void BoardWidget::paintEvent(QPaintEvent *e){
    m_painter->begin(this);
    QPen gap_pen;
    gap_pen.setColor(QColor(200,200,200));
    m_painter->setBackgroundMode(Qt::OpaqueMode);
    int board_size = m_board->get_size();
    int image_index = 0;
    for(int i = 0; i < board_size; i++){
        for(int j = 0; j < board_size; j++){
            image_index = m_board->piece(i,j)->m_value-1;
            if(m_board->piece(i,j)->m_value==0){
                m_painter->fillRect(i*SQUARE_SIZE,j*SQUARE_SIZE,SQUARE_SIZE,SQUARE_SIZE,gap_pen.brush());
            }else{
               m_painter->drawImage(QRect(SQUARE_SIZE*i,SQUARE_SIZE*j,SQUARE_SIZE,SQUARE_SIZE),m_pieces_image[image_index]);
               m_painter->drawLine(i*SQUARE_SIZE,j*SQUARE_SIZE,board_size*SQUARE_SIZE,j*SQUARE_SIZE);
               m_painter->drawLine(i*SQUARE_SIZE,j*SQUARE_SIZE,i*SQUARE_SIZE,board_size*SQUARE_SIZE);
            }
        }
    }
    m_painter->drawLine(0,board_size*SQUARE_SIZE,board_size*SQUARE_SIZE,board_size*SQUARE_SIZE);
    m_painter->drawLine(board_size*SQUARE_SIZE,0,board_size*SQUARE_SIZE,board_size*SQUARE_SIZE);
    m_painter->end();
}

void BoardWidget::mousePressEvent(QMouseEvent *e){
    if(!m_locked){
        int mouse_x;
        int mouse_y;
        mouse_x = e->x();
        mouse_y = e->y();
        m_board->move_piece(mouse_x / SQUARE_SIZE, mouse_y / SQUARE_SIZE);
        emit piece_moved();
        update();
    }
}


void BoardWidget::set_curr_board(PuzzleBoard *board){
    this->m_board = board;
    update();
}


